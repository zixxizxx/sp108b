        -:    0:Source:dict.c
        -:    0:Graph:dict.gcno
        -:    0:Data:dict.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* See compilation notes in dict_use.c*/
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dict.h"
        -:    5:
        -:    6:void *dictionary_not_found;
        -:    7:
        3:    8:dictionary *dictionary_new (void){
        -:    9:    static int dnf;
        3:   10:    if (!dictionary_not_found) dictionary_not_found = &dnf;
        3:   11:    dictionary *out= malloc(sizeof(dictionary));
        3:   12:    *out= (dictionary){ };
        3:   13:    return out;
        -:   14:}
        -:   15:
        6:   16:static void dictionary_add_keyval(dictionary *in, keyval *kv){
        6:   17:    in->length++;
        6:   18:    in->pairs = realloc(in->pairs, in->length*sizeof(keyval*));
        6:   19:    in->pairs[in->length-1] = kv;
        6:   20:}
        -:   21:
        4:   22:void dictionary_add(dictionary *in, char *key, void *value){
        4:   23:    if (!key){fprintf(stderr, "NULL is not a valid key.\n"); abort();}
        4:   24:    dictionary_add_keyval(in, keyval_new(key, value));
        4:   25:}
        -:   26:
        6:   27:void *dictionary_find(dictionary const *in, char const *key){
       12:   28:    for (int i=0; i< in->length; i++)
       10:   29:        if (keyval_matches(in->pairs[i], key))
        4:   30:            return in->pairs[i]->value;
        2:   31:    return dictionary_not_found;
        -:   32:}
        -:   33:
        1:   34:dictionary *dictionary_copy(dictionary *in){
        1:   35:    dictionary *out = dictionary_new();
        3:   36:    for (int i=0; i< in->length; i++)
        2:   37:        dictionary_add_keyval(out, keyval_copy(in->pairs[i]));
        1:   38:    return out;
        -:   39:}
        -:   40:
        3:   41:void dictionary_free(dictionary *in){
        9:   42:    for (int i=0; i< in->length; i++)
        6:   43:        keyval_free(in->pairs[i]);
        3:   44:    free(in->pairs);
        3:   45:    free(in);
        3:   46:}
